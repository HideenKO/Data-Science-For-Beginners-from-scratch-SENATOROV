# # Вопросы и ответы (проверка знаний)
#
# 1. **Как понять, что домашка пришла?**
#    - 0:15–0:40 — зайти в Telegram-группу, просмотреть чат
# с названием Homework
# домашними заданиями.
#
# 2. **Как принять домашку?**
#    - Принять Pull Request на GitHub.
#
# 3. **Зачем нужна кнопка History и какие функции появляются при нажатии
#    правой кнопки мыши на коммит?**
#    - Чтобы смотреть историю коммитов и понимать, когда пришла ДЗ.
#    - В контекстном меню доступны: amend commit, reset to commit, copy SHA
# и т.д.
#
# 3.1 **Где брать ссылку на коммит и куда её отправлять?**
#    - Нажать *View on GitHub*, скопировать ссылку. Отправить в чат
#      «homework»: сообщение + ссылка на коммит.
#
# 4. **Что такое файл лога?**
#    - Файл с записью того что сделали на уроке. Начинаем с даты.
# и продолжаем тем что прошли.
#
# 4.1 **Когда нужно его пушить?**
#    - По завершении  домашки.
#
# 5. **Что такое интерпретатор?**
#    - Программа, которая построчно выполняет (интерпретирует) код.
#
# 6. **Где можно выбрать интерпретатор?**
#    - В VS Code / Jupyter — там, где показывается Kernel (справа/вверху
#      у ноутбука или в строке состояния VS Code).
#
# 7. **Что такое модуль?**
#    - Файл с кодом, например `*.py` или `*.ipynb` (нотбук — особый тип
#      модуля/скрипта).
#
# 8. **Как создать и отправить коммит?**
#    - Создать/изменить файл, затем `git add` → `git commit` → `git push`.
#    - В VS Code можно воспользоваться вкладкой Source Control.
#
# 9. **Как посмотреть, что коммит точно отправлен и находится на GitHub?**
#    - `git status` и `git log` локально; проверить репозиторий на GitHub
#      через веб-интерфейс.
#
# 10. **Какая команда показывает, что код не прошёл проверки линтеров?**
#     - `pre-commit run --all-files` — запустит хуки на всех файлах и
#       покажет, что упало.
#
# 10.1 **Список линтеров и краткая характеристика:**
#    - `flake8` — проверяет стиль кода и типичные ошибки.
#    - `black` — автоформатирует Python-код.
#    - `nbqa` — запускает линтеры/форматтеры на ноутбуках (`.ipynb`).
#    - `mypy` — статическая проверка типов.
#    - `pylint` — глубокий анализ кода: стиль, структура, потенциальные баги.
#
# 11. **Как узнать, какой именно линтер не прошёл?**
#     - `pre-commit run --all-files` или смотреть вывод команды `git commit`.
#       В логе будет указан id хука (например, `nbqa-pylint`
# , `nbqa-pydocstyle` ).
#
# 12. **Pylint видит Markdown?**
#     - Нет. Pylint анализирует Python-код, не Markdown-ячейки.
#
# 13. **Могут ли номера ячеек в терминале и в VS Code отличаться?
# В каком случае?**
#     - Да. Номера могут отличаться, например, если одна из сред не учитывает
#       Markdown-ячейки как кодовые или если порядок ячеек был изменён.
#
# 14. **Где посмотреть номер ячейки в VS Code?**
#     - В правом нижнем углу редактора/ноутбука отображается информация о
#       текущей ячейке.
#
# 15. **В каком формате `ipynb` отправляется в GitHub? При чём здесь JSON?**
#     - `*.ipynb` — это текстовый файл в формате JSON. JSON — удобный стандарт
#       для хранения структурированных данных.
#
# 16. **Где посмотреть, в какой ячейке ошибка?**
#     - В интерфейсе будет подсветка: красная волнистая линия (ошибка) или
#       желтая (warning) под соответствующей ячейкой.
#
# 17. **Как запустить терминал?**
#     - В VS Code: *Terminal → New Terminal* (или кнопка New Terminal
# слева/сверху).
#
# 18. **Что такое линтер?**
#     - Программа, анализирующая код и сообщающая о проблемах (стиль, баги).
#
# 19. **На каком сайте смотреть документацию по ошибке pylint?**
#     - https://pylint.readthedocs.io/en/latest/
#
# 20. **Секция pydocstyle обычно автоматически закрывается после
#     исправления ошибок в каком линтере?**
#     - дописать описание модуля обычно если закрыть pylint он так
# же закроется. | Если не помогло, то проверить, что в конце предложения
# стоит точка.
#
# 21. **Что такое описание модуля (module docstring)?**
#     - Это текст в виде `"""docstring"""`, объясняющий: что делает модуль,
#       какие задачи решает, краткий список основных классов/функций.
#
# 22. **С какой git-команды начинается утро программиста?**
#     - `git pull`
#
# 23. **После внесения изменений кнопка «Open in VS Code» пропала в GitHub.
#     Как иначе открыть репозиторий в VS Code?**
#     - Можно использовать *Open with GitHub Desktop* или клонировать и
#       открыть репозиторий вручную в VS Code.
#
# 24. **Что такое stash?**
#     - Временное сохранение незакоммиченных изменений в рабочей директории,
#       чтобы переключиться на другую задачу.
#
# 23.1 **Как сохранить стэш?**
# ```bash
# git stash save "NAME_STASH"

# 23.2) Как восстановить стэш(подсказка:
# https://t.me/c/1937296927/3602/25747)?#:

# git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:

# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):

# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):

# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.

# 24) Где посмотреть что есть конфликт в файлах?
# 1,  Когда приходит изменения с гитхаба и есть локальные изменения
# 24.1) Когда он появляется?
# Когда приходит обновления с гита
# 25) Как решить конфликт в файлах?
# Accept current change либо удалить что не нужно и нажать resolve in,
# merge editor
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или
# синее то что пришло с гитхаба и зелёное это локальные изменения
# 1. Зеленое  то что пришло с гитхаба и синее  это локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того
# как вы спрячете в стэш свои изменения?
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Нужно нажать restore иначе локальные изменения сохранения сохраняться
# 28) Сколько способов решения конфликтов было показано в видео?
# Напишите ЧИСЛО и укажите их способы.
# 1. Accept current changes примется что пришло с гитхаба
# | Accept current changes примется что локальные изменения
# | Accept both changes.
# | Убирать вручную.
# | 4 способа показано в ролике.
# 29) Что делает кнопка complete merge?
# Убирает конфликт и сохраняет изменения
# 30) В какой чат нужно писать если остались вопросы?
# В чат HELP ME.
# 31) Что такое FORK? Зачем его делают?
# Что бы сделать копию репозитория на свой личный гитхаб
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# 1. Склонировать его на компьютер.
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# Коллени с чата либо же с гитхаба с 99% вероятностью.
# 34) Как создать файл в vs code?
# 1. File → New File
# 35) Файл лога нужно заполнять в конце каждого урока?
# Да.
